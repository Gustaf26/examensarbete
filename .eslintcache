[{"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\index.js":"1","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\App.js":"2","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\AuthRoute.js":"3","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\Login.js":"4","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\Home.js":"5","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\Logout.js":"6","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\ForgotPassword.js":"7","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\NotFound.js":"8","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\Navigation.js":"9","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\Signup.js":"10","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\UpdateProfile.js":"11","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\contexts\\AuthContext.js":"12","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\firebase\\index.js":"13","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\Product.js":"14","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\CreateProduct.js":"15","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\Products.js":"16","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\ProductsGrid.js":"17","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\hooks\\useUploadImage.js":"18","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\hooks\\useDeleteProduct.js":"19","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\UploadImageDropzone.js":"20","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\contexts\\CreateContext.js":"21","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\AdminRoute.js":"22","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\hooks\\useProducts.js":"23","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\UpdateProduct.js":"24","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\SearchResults.js":"25","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\SimpleMenu.js":"26"},{"size":365,"mtime":1616202006917,"results":"27","hashOfConfig":"28"},{"size":4765,"mtime":1621888221709,"results":"29","hashOfConfig":"28"},{"size":329,"mtime":1610142464080,"results":"30","hashOfConfig":"28"},{"size":4276,"mtime":1621892859158,"results":"31","hashOfConfig":"28"},{"size":1604,"mtime":1621597662457,"results":"32","hashOfConfig":"28"},{"size":920,"mtime":1620819938063,"results":"33","hashOfConfig":"28"},{"size":1659,"mtime":1610142464084,"results":"34","hashOfConfig":"28"},{"size":154,"mtime":1610142464103,"results":"35","hashOfConfig":"28"},{"size":5926,"mtime":1621890732954,"results":"36","hashOfConfig":"28"},{"size":2696,"mtime":1621893077420,"results":"37","hashOfConfig":"28"},{"size":4719,"mtime":1620819938068,"results":"38","hashOfConfig":"28"},{"size":2287,"mtime":1619963238307,"results":"39","hashOfConfig":"28"},{"size":923,"mtime":1610142464177,"results":"40","hashOfConfig":"28"},{"size":3865,"mtime":1620907247690,"results":"41","hashOfConfig":"28"},{"size":6098,"mtime":1620827423780,"results":"42","hashOfConfig":"28"},{"size":779,"mtime":1610142464145,"results":"43","hashOfConfig":"28"},{"size":3475,"mtime":1619963238304,"results":"44","hashOfConfig":"28"},{"size":1507,"mtime":1610142464190,"results":"45","hashOfConfig":"28"},{"size":769,"mtime":1608041882011,"results":"46","hashOfConfig":"28"},{"size":3274,"mtime":1620827423787,"results":"47","hashOfConfig":"28"},{"size":4665,"mtime":1620765624108,"results":"48","hashOfConfig":"28"},{"size":326,"mtime":1610142464078,"results":"49","hashOfConfig":"28"},{"size":836,"mtime":1610142464188,"results":"50","hashOfConfig":"28"},{"size":7132,"mtime":1620847117464,"results":"51","hashOfConfig":"28"},{"size":4070,"mtime":1610142464155,"results":"52","hashOfConfig":"28"},{"size":1499,"mtime":1621894151425,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"eltx4h",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\index.js",[],["118","119"],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\App.js",["120"],"import React, { useEffect } from \"react\";\r\nimport { db } from \"./firebase\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport Product from \"./components/products/Product\";\r\nimport Products from \"./components/products/Products\";\r\nimport CreateProduct from \"./components/products/CreateProduct\";\r\nimport UpdateProduct from \"./components/products/UpdateProduct\";\r\nimport AuthRoute from \"./components/AuthRoute\";\r\nimport AdminRoute from \"./components/AdminRoute\";\r\nimport ForgotPassword from \"./components/ForgotPassword\";\r\nimport Home from \"./components/Home\";\r\nimport Login from \"./components/Login\";\r\nimport Logout from \"./components/Logout\";\r\nimport Navigation from \"./components/Navigation\";\r\nimport SearchResults from \"./components/products/SearchResults\";\r\nimport NotFound from \"./components/NotFound\";\r\nimport Signup from \"./components/Signup\";\r\nimport UpdateProfile from \"./components/UpdateProfile\";\r\nimport AuthContextProvider from \"./contexts/AuthContext\";\r\nimport { useCreate } from \"./contexts/CreateContext\";\r\nimport \"./assets/scss/app.scss\";\r\n\r\nconst App = () => {\r\n  const { productCategories, setGlobalCategories } = useCreate();\r\n\r\n  useEffect(() => {\r\n    db.collection(\"cloth-categories\")\r\n      .get()\r\n      .then(function (querySnapshot) {\r\n        let snapshotCategories = [];\r\n        querySnapshot.forEach(function (doc) {\r\n          // doc.data() is never undefined for query doc snapshots\r\n          snapshotCategories.push({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          });\r\n        });\r\n        setGlobalCategories(snapshotCategories);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Error getting documents: \", error);\r\n      });\r\n  }, []);\r\n\r\n  const showFooter = (e) => {\r\n    if (document.documentElement && document.documentElement.scrollTop > 200) {\r\n      document.getElementById(\"footer\").className = \"show\";\r\n    } else {\r\n      document.getElementById(\"footer\").className = \"\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", (e) => {\r\n      showFooter(e);\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Router>\r\n      <AuthContextProvider>\r\n        <SimpleReactLightbox>\r\n          <Navigation />\r\n          <div id=\"main-div\">\r\n            <Container id=\"container\" className=\"py-3\">\r\n              <Routes>\r\n                <Route path=\"/\">\r\n                  <Home />\r\n                </Route>\r\n                <AdminRoute path=\"/create\">\r\n                  <CreateProduct />\r\n                </AdminRoute>\r\n                <AdminRoute path=\"/update\">\r\n                  <UpdateProduct />\r\n                </AdminRoute>\r\n                <Route path=\"/search-results\">\r\n                  <SearchResults />\r\n                </Route>\r\n                <Route path=\"/products\">\r\n                  {productCategories &&\r\n                    productCategories.map((category) => (\r\n                      <Route path={`/${category.name}`} key={category.name}>\r\n                        <Products type={`${category.name}`} />\r\n                        <Route path=\"/:productId\">\r\n                          <Product />\r\n                        </Route>\r\n                      </Route>\r\n                    ))}\r\n                </Route>\r\n\r\n                <Route path=\"/forgot-password\">\r\n                  <ForgotPassword />\r\n                </Route>\r\n\r\n                <Route path=\"/login\">\r\n                  <Login />\r\n                </Route>\r\n\r\n                <Route path=\"/logout\">\r\n                  <Logout />\r\n                </Route>\r\n\r\n                <Route path=\"/signup\">\r\n                  <Signup />\r\n                </Route>\r\n\r\n                <AuthRoute path=\"/update-profile\">\r\n                  <UpdateProfile />\r\n                </AuthRoute>\r\n\r\n                <Route path=\"*\" element={<NotFound />} />\r\n              </Routes>\r\n            </Container>\r\n          </div>\r\n          <footer id=\"footer\" className=\"p-2\">\r\n            <div>\r\n              This site has no commercial aims and is part of an academic\r\n              development-project.\r\n            </div>\r\n            <div>\r\n              Prices and articles are not intended to have a real correspondence\r\n              with same articles in other \"real websites\"\r\n            </div>\r\n            <div>\r\n              If you are interested in these articles we recommend you to visit{\" \"}\r\n              <a href=\"https://www.siteking.co.uk\">\r\n                https://www.siteking.co.uk/\r\n              </a>\r\n            </div>\r\n          </footer>\r\n        </SimpleReactLightbox>\r\n      </AuthContextProvider>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\AuthRoute.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\Login.js",["121","122"],"import firebaseLocalStorage from \"../firebase\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Row, Col, Form, Button, Card, Alert } from \"react-bootstrap\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { useCreate } from \"../contexts/CreateContext\";\r\n\r\nconst Login = () => {\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const { login, checkIfAdmin, setAdmin } = useAuth();\r\n  const [adminChecked, setChecked] = useState(false);\r\n  const [alert, setAlert] = useState(false);\r\n  const [adminAlert, setAdminAlert] = useState(false);\r\n  const navigate = useNavigate();\r\n  const { setCurrentPassword } = useCreate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    setError(null);\r\n\r\n    setCurrentPassword(passwordRef.current.value);\r\n    localStorage.setItem(\"currentPass\", passwordRef.current.value);\r\n\r\n    try {\r\n      // try to log in the user with the specified credentials\r\n      setLoading(true);\r\n      if (adminChecked === true) {\r\n        const adminBoolean = checkIfAdmin(emailRef.current.value);\r\n        if (adminBoolean === false) {\r\n          setAlert(true);\r\n          setLoading(false);\r\n          return;\r\n        } else {\r\n          setAlert(false);\r\n        }\r\n      } else if (adminChecked === false) {\r\n        const adminBoolean = checkIfAdmin(emailRef.current.value);\r\n        if (adminBoolean === true) {\r\n          setAdminAlert(true);\r\n          setLoading(false);\r\n          return;\r\n        } else {\r\n          setAdminAlert(false);\r\n        }\r\n      }\r\n      await login(emailRef.current.value, passwordRef.current.value);\r\n      navigate(\"/\");\r\n    } catch (e) {\r\n      setError(\r\n        \"Could not log in. Please check your email address and your password.\"\r\n      );\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const restoreAlerts = () => {\r\n    setError(false);\r\n    setAdminAlert(false);\r\n    setAlert(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col md={{ span: 6, offset: 3 }}>\r\n          <Card id=\"login-form\">\r\n            <Card.Body>\r\n              <Card.Title>Log In</Card.Title>\r\n\r\n              {error && <Alert variant=\"danger\">{error}</Alert>}\r\n              <Form onSubmit={handleSubmit}>\r\n                <Form.Group id=\"email\">\r\n                  <Form.Label>Email</Form.Label>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    ref={emailRef}\r\n                    onChange={restoreAlerts}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group id=\"password\">\r\n                  <Form.Label>Password</Form.Label>\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    onChange={restoreAlerts}\r\n                    ref={passwordRef}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicCheckbox\">\r\n                  <Form.Check\r\n                    type=\"checkbox\"\r\n                    label=\"I am the administrator\"\r\n                    onChange={() => setChecked(!adminChecked)}\r\n                  />\r\n                </Form.Group>\r\n                <Button disabled={loading} type=\"submit\">\r\n                  Log In\r\n                </Button>\r\n              </Form>\r\n              {alert === true ? (\r\n                <Alert variant=\"danger\" className=\"mt-3\">\r\n                  You don´t have admin permissions\r\n                </Alert>\r\n              ) : null}\r\n\r\n              {adminAlert === true ? (\r\n                <Alert variant=\"warning\" className=\"mt-3\">\r\n                  You are admin. Please check the admin-box\r\n                </Alert>\r\n              ) : null}\r\n              <div className=\"text-center mt-3\">\r\n                <Link to=\"/forgot-password\">Forgot Password?</Link>\r\n              </div>\r\n              <div className=\"text-center mt-2\">\r\n                Need an account? <Link to=\"/signup\">Sign Up</Link>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\Home.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\Logout.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\ForgotPassword.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\NotFound.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\Navigation.js",["123","124","125"],"/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  NavDropdown,\r\n  Container,\r\n  Form,\r\n  Row,\r\n  FormControl,\r\n  Col,\r\n} from \"react-bootstrap\";\r\nimport { NavLink, Link, useNavigate } from \"react-router-dom\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { useCreate } from \"../contexts/CreateContext\";\r\nimport ShoppingBasket from \"@material-ui/icons/ShoppingBasket\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport SimpleMenu from \"./SimpleMenu\";\r\n\r\nconst Navigation = () => {\r\n  const { currentUser, admin } = useAuth();\r\n  const [createLink, setCreate] = useState(false);\r\n  const [customMenu, setCustMenu] = useState(false);\r\n  const { setSearchResults, setSearchString } = useCreate();\r\n  const navigate = useNavigate();\r\n\r\n  const omitReload = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const changeString = (e) => {\r\n    setSearchResults([]);\r\n    setSearchString(e.target.value);\r\n    localStorage.setItem(\"search\", JSON.stringify(e.target.value));\r\n    navigate(\"/search-results\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (admin === true && currentUser) {\r\n      setCreate(true);\r\n    } else {\r\n      setCreate(false);\r\n    }\r\n  }, [admin, currentUser]);\r\n\r\n  useEffect(() => {\r\n    if (window.innerWidth < 1000) {\r\n      setCustMenu(true);\r\n    }\r\n\r\n    window.addEventListener(\"resize\", function (event) {\r\n      if (window.innerWidth > 1000) {\r\n        setCustMenu(false);\r\n      }\r\n      if (window.innerWidth < 1000) {\r\n        setCustMenu(true);\r\n      }\r\n    });\r\n    let inputEl = document.getElementById(\"product-search\");\r\n    inputEl.focus();\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Navbar id=\"navigation\">\r\n        <Container>\r\n          <Row className=\"py-3 m-left-3 d-flex\" id=\"nav-row\">\r\n            <Col lg={4} sm={12}>\r\n              <Nav>\r\n                <NavLink to=\"/\" id=\"logo\" className=\"navbar-brand m-left-3\">\r\n                  Work Out\r\n                </NavLink>\r\n              </Nav>\r\n            </Col>\r\n            <Col\r\n              sm={12}\r\n              md={10}\r\n              lg={6}\r\n              className=\"mx-auto my-auto justify-content-end\"\r\n            >\r\n              <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n              <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Form onSubmit={omitReload} inline>\r\n                  <FormControl\r\n                    onChange={changeString}\r\n                    type=\"text\"\r\n                    id=\"product-search\"\r\n                    placeholder=\"Search product\"\r\n                    className=\"mr-sm-3 ml-5 navitem\"\r\n                  />\r\n                  <SearchIcon id=\"search-icon\" />\r\n                </Form>\r\n                {!customMenu && (\r\n                  <Nav className=\"mx-3\" id=\"nav-links\">\r\n                    {createLink === true ? (\r\n                      <NavLink\r\n                        to=\"/create\"\r\n                        className=\"ml-4 mr-3 my-auto create-button\"\r\n                      >\r\n                        Create\r\n                      </NavLink>\r\n                    ) : null}\r\n                    <NavDropdown\r\n                      title=\"All clothes\"\r\n                      id=\"basic-nav-dropdown\"\r\n                      className=\"ml-3 navitem\"\r\n                      id=\"clothes-drop-title\"\r\n                    >\r\n                      <NavLink\r\n                        to=\"/products/troussers\"\r\n                        className=\"dropdown-item\"\r\n                      >\r\n                        Troussers\r\n                      </NavLink>\r\n                      <NavDropdown.Divider />\r\n                      <NavLink to=\"/products/jackets\" className=\"dropdown-item\">\r\n                        Jackets\r\n                      </NavLink>\r\n                      <NavDropdown.Divider />\r\n                      <NavLink\r\n                        to=\"/products/t-shirts\"\r\n                        className=\"dropdown-item\"\r\n                      >\r\n                        T-shirts\r\n                      </NavLink>\r\n                    </NavDropdown>\r\n                    {currentUser ? (\r\n                      <div className=\"d-flex align-items-center justify-content-between\">\r\n                        <NavDropdown\r\n                          title={currentUser.displayName || currentUser.email}\r\n                          id=\"basic-nav-dropdown\"\r\n                          className=\"mx-lg-2 navitem\"\r\n                        >\r\n                          <NavLink\r\n                            to=\"/update-profile\"\r\n                            className=\"dropdown-item\"\r\n                          >\r\n                            Update Profile\r\n                          </NavLink>\r\n                          <NavDropdown.Divider />\r\n                          <NavLink to=\"/logout\" className=\"dropdown-item\">\r\n                            Log Out\r\n                          </NavLink>\r\n                        </NavDropdown>\r\n                        {!admin && (\r\n                          <ShoppingBasket\r\n                            id=\"basket-icon\"\r\n                            color=\"primary\"\r\n                            className=\"mx-lg-3 p-1\"\r\n                            rounded\r\n                          />\r\n                        )}\r\n                      </div>\r\n                    ) : (\r\n                      <NavLink\r\n                        to=\"/login\"\r\n                        className=\"nav-link signin navitem ml-3\"\r\n                        id=\"login-link\"\r\n                      >\r\n                        Sign In / Register\r\n                      </NavLink>\r\n                    )}\r\n                  </Nav>\r\n                )}\r\n                {customMenu && <SimpleMenu />}\r\n              </Navbar.Collapse>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\Signup.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\UpdateProfile.js",["126"],"import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Form, Button, Card, Alert } from \"react-bootstrap\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { useCreate } from \"../contexts/CreateContext\";\r\n\r\nconst UpdateProfile = () => {\r\n  const { currentUser, updateEmail, updatePassword, updateProfile } = useAuth();\r\n  const [displayNameRef, setNameRef] = useState(\"\");\r\n  const [emailRef, setEmailRef] = useState(currentUser.email);\r\n  const [passwordRef, setPassRef] = useState(\"\");\r\n  const [passwordConfirmRef, setPassConfirmRef] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [message, setMessage] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const { currentPassword, setCurrentPassword } = useCreate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // make sure user has entered the same password in both input fields\r\n    if (passwordRef !== passwordConfirmRef) {\r\n      return setError(\"The passwords don´t match\");\r\n    }\r\n\r\n    setError(null);\r\n    const updateTasks = [];\r\n\r\n    try {\r\n      // disable update-button while updating is in progress\r\n      setLoading(true);\r\n\r\n      // update displayName if user has changed it\r\n      if (displayNameRef && displayNameRef !== currentUser.displayName) {\r\n        updateTasks.push(updateProfile(displayNameRef));\r\n      }\r\n\r\n      // update email if user has changed it\r\n      if (emailRef && emailRef !== currentUser.email) {\r\n        updateTasks.push(updateEmail(emailRef));\r\n      }\r\n\r\n      // wait for all updateTasks to finish\r\n      await Promise.all(updateTasks);\r\n\r\n      // update password if user has provided a new password\r\n      if (passwordRef) {\r\n        await updatePassword(passwordRef);\r\n      }\r\n\r\n      setCurrentPassword(passwordRef);\r\n\r\n      // profit!\r\n      setMessage(\"Profile successfully updated\");\r\n      setLoading(false);\r\n    } catch (e) {\r\n      setError(\"Error updating profile. Try logging out and in again.\");\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let passwordInStorage = localStorage.getItem(\"currentPass\");\r\n    if (currentPassword) {\r\n      setPassRef(currentPassword);\r\n      setPassConfirmRef(currentPassword);\r\n    } else if (passwordInStorage) {\r\n      setCurrentPassword(passwordInStorage);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col md={{ span: 6, offset: 3 }}>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Title>Update Profile</Card.Title>\r\n\r\n              {error && <Alert variant=\"danger\">{error}</Alert>}\r\n              {message && <Alert variant=\"success\">{message}</Alert>}\r\n\r\n              <Form onSubmit={handleSubmit}>\r\n                <Form.Group id=\"displayName\">\r\n                  <Form.Label>Name</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    onChange={(e) => setNameRef(e.target.value)}\r\n                    // ref={displayNameRef}\r\n                    defaultValue={currentUser.displayName}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group id=\"email\">\r\n                  <Form.Label>Email</Form.Label>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    // ref={emailRef}\r\n                    onChange={(e) => setEmailRef(e.target.value)}\r\n                    defaultValue={currentUser.email}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label type=\"password\">Password</Form.Label>\r\n                  <Form.Control\r\n                    id=\"password\"\r\n                    onChange={(e) => setPassRef(e.target.value)}\r\n                    placeholder=\"Enter a new password\"\r\n                    defaultValue={currentPassword}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Password Confirmation</Form.Label>\r\n                  <Form.Control\r\n                    id=\"password-confirm\"\r\n                    type=\"password\"\r\n                    // ref={passwordConfirmRef}\r\n                    onChange={(e) => setPassConfirmRef(e.target.value)}\r\n                    placeholder=\"Confirm the new password\"\r\n                    defaultValue={currentPassword}\r\n                    required\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button disabled={loading} type=\"submit\">\r\n                  Update\r\n                </Button>\r\n              </Form>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateProfile;\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\contexts\\AuthContext.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\firebase\\index.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\Product.js",["127"],"import React, { useEffect } from \"react\";\r\nimport { Link, useNavigate, useParams, useLocation } from \"react-router-dom\";\r\nimport { BounceLoader } from \"react-spinners\";\r\nimport { Card, Button, Breadcrumb } from \"react-bootstrap\";\r\nimport { useCreate } from \"../../contexts/CreateContext\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { db } from \"../../firebase\";\r\nimport \"../../assets/scss/app.scss\";\r\n\r\nconst Product = () => {\r\n  const {\r\n    singleProduct,\r\n    productOption,\r\n    setSingleProduct,\r\n    setLocation,\r\n    setProdId,\r\n  } = useCreate();\r\n  const { admin } = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { productId } = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!singleProduct) {\r\n      setLocation(location.pathname);\r\n      setProdId(productId);\r\n    }\r\n  }, []);\r\n\r\n  const handleUpdateProduct = (product) => {\r\n    setSingleProduct(product);\r\n    navigate(`/update`);\r\n  };\r\n\r\n  const handleDeleteProduct = (product) => {\r\n    try {\r\n      const deletion = async () => {\r\n        console.log(\"ddeleteing \" + product.name + \"of\" + productOption);\r\n\r\n        db.collection(`${productOption}`).doc(`${product.id}`).delete();\r\n\r\n        setTimeout(() => {\r\n          navigate(`/products/${productOption}`);\r\n        }, 1000);\r\n      };\r\n\r\n      deletion();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Breadcrumb className=\"mb-3\">\r\n        <Breadcrumb.Item>\r\n          <Link to=\"/\">Home</Link>\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item>\r\n          {productOption && (\r\n            <Link to={`/products/${productOption}`}>{productOption}</Link>\r\n          )}\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item active>\r\n          {singleProduct ? singleProduct.name : null}\r\n        </Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      {!singleProduct && <BounceLoader color={\"#888\"} size={20} />}\r\n      {singleProduct && (\r\n        <Card className=\"mb-3 col-6 mx-auto mb-5 singleCard\">\r\n          <h2 className=\"mb-3 mt-3 col-12 d-flex justify-content-center\">\r\n            {\" \"}\r\n            {singleProduct && singleProduct.name}\r\n          </h2>\r\n          <p\r\n            href={singleProduct.thumbnail}\r\n            title=\"View image in lightbox\"\r\n            data-attribute=\"SRL\"\r\n          >\r\n            <Card.Img\r\n              variant=\"top\"\r\n              src={singleProduct.thumbnail}\r\n              title={singleProduct.name}\r\n            />\r\n          </p>\r\n          <Card.Body>\r\n            <Card.Text className=\"text-muted small\">\r\n              <b>{singleProduct.name}</b>\r\n            </Card.Text>\r\n            <Card.Text className=\"text-muted small\">\r\n              <b>Price: </b> {singleProduct.price} €\r\n            </Card.Text>\r\n            <Card.Text className=\"text-muted small\">\r\n              <b>Description: </b>{\" \"}\r\n              <span>\r\n                {singleProduct.description && singleProduct.description}\r\n              </span>\r\n            </Card.Text>\r\n            {admin && (\r\n              <div>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  size=\"sm\"\r\n                  className=\"col-12 mt-3 p-2\"\r\n                  onClick={() => {\r\n                    handleDeleteProduct(singleProduct);\r\n                  }}\r\n                >\r\n                  Delete\r\n                </Button>\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  size=\"sm\"\r\n                  className=\"col-12 mt-3 p-2\"\r\n                  onClick={() => {\r\n                    handleUpdateProduct(singleProduct);\r\n                  }}\r\n                >\r\n                  Update\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\CreateProduct.js",["128"],"import React, { useState, useEffect } from \"react\";\r\nimport UploadImageDropzone from \"./UploadImageDropzone\";\r\nimport { Row, Col, Card, Form, Button, Alert } from \"react-bootstrap\";\r\nimport { BounceLoader } from \"react-spinners\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { db } from \"../../firebase\";\r\nimport { useCreate } from \"../../contexts/CreateContext\";\r\n\r\nconst CreateProduct = () => {\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [prodPrice, setPrice] = useState(\"\");\r\n\r\n  const {\r\n    imageUrl,\r\n    productOption,\r\n    setProductOption,\r\n    setSingleProduct,\r\n    productCategories,\r\n    setImageUrl,\r\n  } = useCreate();\r\n  const navigate = useNavigate();\r\n\r\n  const handleNameChange = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleDescriptionChange = (e) => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  const handlePrice = (e) => {\r\n    const newPrice = e.target.value;\r\n    setPrice(newPrice);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (name.length < 4 || description < 20 || !imageUrl) {\r\n      setError(\"You are missing some of the required upload parameters\");\r\n      return;\r\n    }\r\n\r\n    setError(false);\r\n    setLoading(true);\r\n\r\n    try {\r\n      const ranNumber = Math.floor(Math.random() * 10000);\r\n\r\n      await db.collection(`${productOption}`).doc(`${ranNumber}`).set({\r\n        name: name,\r\n        description: description,\r\n        thumbnail: imageUrl,\r\n        price: prodPrice,\r\n        id: ranNumber,\r\n        category: productOption,\r\n      });\r\n\r\n      const timingFunction = setInterval(async () => {\r\n        setLoading(true);\r\n        await db\r\n          .collection(`${productOption}`)\r\n          .doc(`${ranNumber}`)\r\n          .get()\r\n          .then((doc) => {\r\n            if (doc.data()) {\r\n              setSingleProduct(doc.data());\r\n              navigate(`/products/${productOption}/${ranNumber}`);\r\n              setLoading(false);\r\n              clearInterval(timingFunction);\r\n            }\r\n          }, 2000);\r\n      });\r\n    } catch (e) {\r\n      setError(e.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setProductOption(\"troussers\");\r\n    setImageUrl(\"\");\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col md={{ span: 6, offset: 3 }}>\r\n          {!loading && (\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>Create a product entry</Card.Title>\r\n\r\n                {error && <Alert variant=\"danger\">{error}</Alert>}\r\n\r\n                <Form onSubmit={handleSubmit}>\r\n                  <Form.Group id=\"title\">\r\n                    <Form.Label>Product name</Form.Label>\r\n                    <Form.Control\r\n                      type=\"title\"\r\n                      onChange={handleNameChange}\r\n                      value={name}\r\n                      required\r\n                    />\r\n                    {name && name.length < 4 && (\r\n                      <Form.Text className=\"text-danger\">\r\n                        Please enter a name at least 4 characters long.\r\n                      </Form.Text>\r\n                    )}\r\n                  </Form.Group>\r\n                  <Form.Group id=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control\r\n                      type=\"title\"\r\n                      onChange={handleDescriptionChange}\r\n                      value={description}\r\n                      required\r\n                    />\r\n                    {description && description.length < 20 && (\r\n                      <Form.Text className=\"text-danger\">\r\n                        Please enter a description at least 20 characters long.\r\n                      </Form.Text>\r\n                    )}\r\n                  </Form.Group>\r\n                  <Form.Group>\r\n                    <Form.Label>Choose product category</Form.Label>\r\n                    <Form.Control\r\n                      as=\"select\"\r\n                      required\r\n                      id=\"inlineFormCustomSelect\"\r\n                      custom\r\n                      onClick={(e) =>\r\n                        setProductOption(e.target.value.toLowerCase())\r\n                      }\r\n                    >\r\n                      {productCategories &&\r\n                        productCategories.map((category) => (\r\n                          <option key={category.id}>\r\n                            {category.name.toUpperCase()}\r\n                          </option>\r\n                        ))}\r\n                    </Form.Control>\r\n                    <Form.Text className=\"text-danger\">\r\n                      Please note that troussers are default option\r\n                    </Form.Text>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"price\">\r\n                    <Form.Label>Price</Form.Label>\r\n                    <Form.Control\r\n                      type=\"title\"\r\n                      onChange={handlePrice}\r\n                      value={prodPrice}\r\n                      required\r\n                    />\r\n                    {prodPrice && prodPrice === \"0\" && (\r\n                      <Form.Text className=\"text-danger\">\r\n                        Please set the product price.\r\n                      </Form.Text>\r\n                    )}\r\n                  </Form.Group>\r\n                  {productOption && (\r\n                    <UploadImageDropzone type={productOption} />\r\n                  )}\r\n                  <Button disabled={loading} type=\"submit\" className=\"mx-auto\">\r\n                    Create\r\n                  </Button>\r\n                </Form>\r\n              </Card.Body>\r\n            </Card>\r\n          )}\r\n          {loading && (\r\n            <div className=\"d-flex justify-content-center my-5\">\r\n              <BounceLoader color={\"#888\"} size={100} />\r\n            </div>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateProduct;\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\Products.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\ProductsGrid.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\hooks\\useUploadImage.js",["129"],"import { useState, useEffect } from \"react\";\r\nimport { storage } from \"../firebase\";\r\nimport { useCreate } from \"../contexts/CreateContext\";\r\n\r\nconst useUploadImage = ({ file }) => {\r\n  const [uploadProgress, setUploadProgress] = useState(null);\r\n  const [uploadedImage, setUploadedImage] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const { setImageUrl, productOption } = useCreate();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      setUploadProgress(null);\r\n      setUploadedImage(null);\r\n      setError(null);\r\n      setIsSuccess(false);\r\n\r\n      return;\r\n    }\r\n\r\n    // reset environment\r\n    setError(null);\r\n    setIsSuccess(false);\r\n\r\n    // get file reference\r\n    const fileRef = storage.ref(`${productOption}/${file.name}`);\r\n\r\n    // upload file to fileRef\r\n    const uploadTask = fileRef.put(file);\r\n\r\n    // attach listener for `state_changed`-event\r\n    uploadTask.on(\"state_changed\", (taskSnapshot) => {\r\n      setUploadProgress(\r\n        Math.round(\r\n          (taskSnapshot.bytesTransferred / taskSnapshot.totalBytes) * 100\r\n        )\r\n      );\r\n    });\r\n\r\n    // are we there yet?\r\n    uploadTask.then((snapshot) => {\r\n      // retrieve URL to uploaded file\r\n      snapshot.ref.getDownloadURL().then((url) => {\r\n        // add uploaded file to db\r\n        setImageUrl(url);\r\n      });\r\n    });\r\n  }, [file]);\r\n\r\n  return { uploadProgress, uploadedImage, error, isSuccess };\r\n};\r\n\r\nexport default useUploadImage;\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\hooks\\useDeleteProduct.js",["130","131","132"],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\UploadImageDropzone.js",["133"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport ProgressBar from \"react-bootstrap/esm/ProgressBar\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport useUploadImage from \"../../hooks/useUploadImage\";\r\n\r\nconst UploadImageDropzone = ({ type }) => {\r\n  const [uploadFile, setUploadFile] = useState({ file: \"\", type: \"\" });\r\n  const [message, setMessage] = useState(null);\r\n  const { uploadProgress, error, isSuccess } = useUploadImage(uploadFile);\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      setMessage({\r\n        error: true,\r\n        text: error,\r\n      });\r\n    } else if (isSuccess) {\r\n      setMessage({\r\n        success: true,\r\n        text: \"Image successfully uploaded!\",\r\n      });\r\n    } else {\r\n      setMessage(null);\r\n    }\r\n  }, [error, isSuccess]);\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    setMessage(null);\r\n\r\n    if (acceptedFiles.length === 0) {\r\n      alert(\"You can only upload one file for a product\");\r\n      return;\r\n    }\r\n    setUploadFile({\r\n      file: acceptedFiles[0],\r\n      type: type,\r\n    });\r\n  }, []);\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    acceptedFiles,\r\n    fileRejections,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    accept: \"image/gif, image/jpeg, image/png\",\r\n    maxFiles: 1,\r\n    onDrop,\r\n  });\r\n\r\n  return (\r\n    <div\r\n      {...getRootProps()}\r\n      id=\"upload-image-dropzone-wrapper\"\r\n      className={`text-center px-4 py-3 my-3 ${\r\n        isDragAccept ? `drag-accept` : ``\r\n      } ${isDragReject ? `drag-reject` : ``}`}\r\n    >\r\n      <input type=\"image\" alt=\"drop-input for your file\" {...getInputProps()} />\r\n      {isDragActive ? (\r\n        isDragAccept ? (\r\n          <p>Drop image</p>\r\n        ) : (\r\n          <p>File not allowed</p>\r\n        )\r\n      ) : (\r\n        <p>Drop here product picture</p>\r\n      )}\r\n      {acceptedFiles && (\r\n        <div className=\"accepted-files mt-2\">\r\n          <ul className=\"list-unstyled\">\r\n            {acceptedFiles.map((file) => (\r\n              <li key={file.name}>\r\n                {file.name} ({Math.round(file.size / 1024)} kb)\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {fileRejections.length > 0 && (\r\n        <div className=\"rejected-files mt-2\">\r\n          <p>Rejected files</p>\r\n          <ul className=\"list-unstyled\">\r\n            {fileRejections.map(({ file, errors }) => {\r\n              return (\r\n                <li key={file.path}>\r\n                  {file.path} - {file.size} bytes\r\n                  <ul className=\"list-unstyled\">\r\n                    {errors.map((e) => (\r\n                      <li key={e.code}>{e.message}</li>\r\n                    ))}\r\n                  </ul>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {/* Output upload status */}\r\n      {uploadProgress !== null && uploadProgress !== 100 && (\r\n        <ProgressBar variant=\"success\" animated now={uploadProgress} />\r\n      )}\r\n\r\n      {message && (\r\n        <Alert variant={message.error ? \"warning\" : \"success\"}>\r\n          {message.text}\r\n        </Alert>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadImageDropzone;\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\contexts\\CreateContext.js",["134","135","136","137","138","139"],"import { useRef } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport { createContext, useContext, useState, useEffect } from \"react\";\r\nimport { BounceLoader } from \"react-spinners\";\r\n\r\nconst CreateContext = createContext();\r\n\r\nconst useCreate = () => {\r\n  return useContext(CreateContext);\r\n};\r\n\r\nconst CreateContextProvider = (props) => {\r\n  const [imageUrl, setImageUrl] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [productOption, setProductOption] = useState(null);\r\n  const [singleProduct, setSingleProduct] = useState(\"\");\r\n  const [productCategories, setGlobalCategories] = useState([]);\r\n  const allProducts = useRef([]);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [searchString, setSearchString] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [prodId, setProdId] = useState(\"\");\r\n  const [currentPassword, setCurrentPassword] = useState(\"\");\r\n\r\n  const getSingleProduct = () => {\r\n    const firstDash = location.indexOf(\"/\");\r\n    const secondDash = location.lastIndexOf(\"/\");\r\n    const semiPath = location.slice(firstDash, secondDash);\r\n    const category = semiPath.replace(\"/products/\", \"\");\r\n\r\n    let preliminaryProd = allProducts.current.filter(\r\n      (prod) => prod.id === Number(prodId) && prod.category === category\r\n    );\r\n    if (preliminaryProd.length) {\r\n      setProductOption(category);\r\n      setSingleProduct(preliminaryProd[0]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    allProducts.current = [];\r\n\r\n    productCategories.map((category) => {\r\n      let snapshotProducts = [];\r\n\r\n      db.collection(`${category.name}`).onSnapshot((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          snapshotProducts.push({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          });\r\n        });\r\n        let emptyArr;\r\n        emptyArr = [...snapshotProducts];\r\n        console.log(emptyArr);\r\n\r\n        if (emptyArr.length > 1) {\r\n          emptyArr.map((product) => {\r\n            allProducts.current.map((prod, index) => {\r\n              //DeLeting stale data from allProducts\r\n              if (\r\n                product.category &&\r\n                prod.category.toLowerCase() === product.category.toLowerCase()\r\n              ) {\r\n                allProducts.current.splice(index, 1);\r\n              }\r\n\r\n              if (prod.name === product.name) {\r\n                allProducts.current.splice(index, 1);\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        allProducts.current.push(...emptyArr);\r\n\r\n        // Getting search string from local Storage on reload in search-results-route when all products available\r\n        if (\r\n          allProducts.current.length > 10 &&\r\n          location === \"/search-results\" &&\r\n          searchString === \"\"\r\n        ) {\r\n          setSearchString(JSON.parse(window.localStorage.getItem(\"search\")));\r\n        }\r\n\r\n        // Function to fetch product when routing to /products/{category}/:productId\r\n        if (prodId) {\r\n          getSingleProduct();\r\n        }\r\n\r\n        snapshotProducts = [];\r\n      });\r\n    });\r\n\r\n    return () => {\r\n      allProducts.current = [];\r\n    };\r\n  }, [productCategories, prodId]);\r\n\r\n  useEffect(() => {\r\n    if (allProducts.current.length && searchString !== \"\") {\r\n      allProducts.current.map((product) => {\r\n        if (\r\n          (product.name &&\r\n            product.name.toLowerCase().includes(searchString.toLowerCase())) ||\r\n          (product.description &&\r\n            product.description\r\n              .toLowerCase()\r\n              .includes(searchString.toLowerCase())) ||\r\n          (product.category &&\r\n            product.category.toLowerCase().includes(searchString.toLowerCase()))\r\n        ) {\r\n          setSearchResults((prevProds) => [...prevProds, product]);\r\n        }\r\n      });\r\n    }\r\n  }, [searchString]);\r\n\r\n  const contextValues = {\r\n    setImageUrl,\r\n    imageUrl,\r\n    setProductOption,\r\n    productOption,\r\n    setSingleProduct,\r\n    singleProduct,\r\n    productCategories,\r\n    setGlobalCategories,\r\n    setSearchString,\r\n    allProducts,\r\n    searchResults,\r\n    setSearchResults,\r\n    getSingleProduct,\r\n    setProdId,\r\n    setLocation,\r\n    searchString,\r\n    currentPassword,\r\n    setCurrentPassword,\r\n  };\r\n\r\n  return (\r\n    <CreateContext.Provider value={contextValues}>\r\n      {loading && (\r\n        <div className=\"d-flex justify-content-center my-5\">\r\n          <BounceLoader color={\"#888\"} size={100} />\r\n        </div>\r\n      )}\r\n      {!loading && props.children}\r\n    </CreateContext.Provider>\r\n  );\r\n};\r\n\r\nexport { CreateContext, useCreate, CreateContextProvider as default };\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\AdminRoute.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\hooks\\useProducts.js",[],"C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\UpdateProduct.js",["140","141","142"],"import React, { useState, useEffect } from \"react\";\r\nimport UploadImageDropzone from \"./UploadImageDropzone\";\r\nimport { Row, Col, Card, Form, Button, Alert } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { db } from \"../../firebase\";\r\nimport { useCreate } from \"../../contexts/CreateContext\";\r\n\r\nconst UpdateProduct = () => {\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [prodPrice, setPrice] = useState(\"\");\r\n  const {\r\n    imageUrl,\r\n    productOption,\r\n    setProductOption,\r\n    setSingleProduct,\r\n    singleProduct,\r\n    productCategories,\r\n    setImageUrl,\r\n  } = useCreate();\r\n  const navigate = useNavigate();\r\n\r\n  const handleNameChange = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleDescriptionChange = (e) => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  const handlePrice = (e) => {\r\n    const newPrice = e.target.value;\r\n    setPrice(newPrice);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(productCategories);\r\n  }, [productCategories]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (name.length < 4 || description < 20 || !imageUrl) {\r\n      setError(\"You are missing some of the required upload parameters\");\r\n      return;\r\n    }\r\n\r\n    setError(false);\r\n    setLoading(true);\r\n\r\n    try {\r\n      db.collection(`${productOption}`).doc(`${singleProduct.id}`).set({\r\n        name: name,\r\n        description: description,\r\n        thumbnail: imageUrl,\r\n        price: prodPrice,\r\n        id: singleProduct.id,\r\n        category: productOption,\r\n      });\r\n\r\n      db.collection(`${productOption}`)\r\n        .doc(`${singleProduct.id}`)\r\n        .get()\r\n        .then((doc) => {\r\n          setSingleProduct(doc.data());\r\n          setTimeout(() => {\r\n            navigate(`/products/${productOption}/${singleProduct.id}`);\r\n          }, 1000);\r\n        });\r\n    } catch (e) {\r\n      setError(e.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setProductOption(singleProduct.category);\r\n    setName(singleProduct.name);\r\n    setDescription(singleProduct.description);\r\n    setPrice(singleProduct.price);\r\n    setImageUrl(singleProduct.thumbnail);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col md={{ span: 6, offset: 3 }}>\r\n          {singleProduct ? (\r\n            <Card>\r\n              <Card.Body>\r\n                <Card.Title>Update a product entry</Card.Title>\r\n\r\n                {error && <Alert variant=\"danger\">{error}</Alert>}\r\n\r\n                <Form onSubmit={handleSubmit}>\r\n                  <Form.Group id=\"title\">\r\n                    <Form.Label>Product name</Form.Label>\r\n                    <Form.Control\r\n                      type=\"title\"\r\n                      onChange={handleNameChange}\r\n                      // value={name}\r\n                      defaultValue={singleProduct.name}\r\n                      required\r\n                    />\r\n                    {name && name.length < 4 && (\r\n                      <Form.Text className=\"text-danger\">\r\n                        Please enter a name at least 4 characters long.\r\n                      </Form.Text>\r\n                    )}\r\n                  </Form.Group>\r\n                  <Form.Group id=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control\r\n                      type=\"title\"\r\n                      onChange={handleDescriptionChange}\r\n                      // value={description}\r\n                      defaultValue={singleProduct.description}\r\n                      required\r\n                    />\r\n                    {singleProduct.description &&\r\n                      singleProduct.description.length < 20 && (\r\n                        <Form.Text className=\"text-danger\">\r\n                          Please update with a description at least 20\r\n                          characters long.\r\n                        </Form.Text>\r\n                      )}\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"exampleForm.ControlSelect2\">\r\n                    <Form.Label>Choose product category</Form.Label>\r\n                    <Form.Control\r\n                      // id=\"inlineFormCustomSelect\"\r\n                      custom\r\n                      as=\"select\"\r\n                      required\r\n                      onClick={(e) =>\r\n                        setProductOption(e.target.value.toLowerCase())\r\n                      }\r\n                    >\r\n                      {productCategories &&\r\n                        productCategories.map((category, i) => {\r\n                          if (category.name === singleProduct.category) {\r\n                            return (\r\n                              <option key={i}>\r\n                                {category.name.toUpperCase()}\r\n                              </option>\r\n                            );\r\n                          }\r\n                        })}\r\n                      {productCategories &&\r\n                        productCategories.map((category, i) => {\r\n                          if (category.name !== singleProduct.category) {\r\n                            return (\r\n                              <option key={i}>\r\n                                {category.name.toUpperCase()}\r\n                              </option>\r\n                            );\r\n                          }\r\n                        })}\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group id=\"price\">\r\n                    <Form.Label>Price</Form.Label>\r\n                    <Form.Control\r\n                      type=\"title\"\r\n                      onChange={handlePrice}\r\n                      // value={prodPrice}\r\n                      defaultValue={singleProduct.price}\r\n                      required\r\n                    />\r\n                    {prodPrice && prodPrice === \"0\" && (\r\n                      <Form.Text className=\"text-danger\">\r\n                        Please set the product price.\r\n                      </Form.Text>\r\n                    )}\r\n                  </Form.Group>\r\n                  {productOption && (\r\n                    <UploadImageDropzone type={productOption} />\r\n                  )}\r\n                  <Form.Text className=\"text-warning mb-3\">\r\n                    If no photo is uploaded, you are keeping the same original\r\n                    photo\r\n                  </Form.Text>\r\n                  <Button\r\n                    disabled={loading}\r\n                    type=\"submit\"\r\n                    className=\"mx-auto my-3\"\r\n                  >\r\n                    Update\r\n                  </Button>\r\n                </Form>\r\n              </Card.Body>\r\n            </Card>\r\n          ) : (\r\n            <Alert variant=\"warning\">\r\n              An error just occurred. Please navigate back to the products list\r\n            </Alert>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateProduct;\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\products\\SearchResults.js",["143"],"import React, { useEffect } from \"react\";\r\nimport { db } from \"../../firebase\";\r\nimport { Link, useNavigate, useLocation } from \"react-router-dom\";\r\nimport { Row, Col, Card, Button, Breadcrumb } from \"react-bootstrap\";\r\nimport { useCreate } from \"../../contexts/CreateContext\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\nconst SearchResults = () => {\r\n  const navigate = useNavigate();\r\n  const {\r\n    setSingleProduct,\r\n    setProductOption,\r\n    searchResults,\r\n    setSearchResults,\r\n    productOption,\r\n    setLocation,\r\n  } = useCreate();\r\n\r\n  const { admin } = useAuth();\r\n  const location = useLocation();\r\n\r\n  const handleUpdateProduct = (product) => {\r\n    setSingleProduct(product);\r\n    navigate(`/update`);\r\n  };\r\n\r\n  const handleDeleteProduct = (product) => {\r\n    console.log(product);\r\n\r\n    try {\r\n      const deletion = async () => {\r\n        console.log(\"ddeleteing \" + productOption + product.name);\r\n\r\n        await db\r\n          .collection(`${productOption}`)\r\n          .doc(`${product.id}`)\r\n          .delete()\r\n          .then(setSearchResults([]))\r\n          .then(navigate(`/products/${productOption}`));\r\n      };\r\n\r\n      deletion();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLocation(location.pathname);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Breadcrumb className=\"mb-3\">\r\n        <Breadcrumb.Item>\r\n          <Link to=\"/\">Home</Link>\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item active>Search results</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <Row className=\"my-3\">\r\n        {searchResults &&\r\n          searchResults.map((item, index) => (\r\n            <Col sm={6} md={6} lg={3} key={index}>\r\n              <Card className=\"mb-3\">\r\n                <a\r\n                  href={item.thumbnail}\r\n                  title=\"View image in lightbox\"\r\n                  data-attribute=\"SRL\"\r\n                >\r\n                  <Card.Img\r\n                    variant=\"top\"\r\n                    src={item.thumbnail}\r\n                    title={item.name}\r\n                  />\r\n                </a>\r\n                <Card.Body\r\n                  className=\"d-block\"\r\n                  onClick={() => {\r\n                    setSingleProduct(item);\r\n                    setProductOption(item.category);\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  <Link to={`/products/${item.category}/${item.id}`}>\r\n                    <Card.Text className=\"text-muted small\">\r\n                      <b>{item.name}</b>\r\n                    </Card.Text>\r\n                    <Card.Text className=\"text-muted small\">\r\n                      <b>Price: </b> {item.price} €\r\n                    </Card.Text>\r\n                    <Card.Text className=\"text-muted small\">\r\n                      <b>Description: </b>{\" \"}\r\n                      <span>\r\n                        {item.description.slice(0, 100)}... <b>(Read more)</b>\r\n                      </span>\r\n                    </Card.Text>\r\n                  </Link>\r\n                  {admin && (\r\n                    <div>\r\n                      <Button\r\n                        variant=\"danger\"\r\n                        size=\"sm\"\r\n                        className=\"col-5 mt-3 ml-3 p-2\"\r\n                        onClick={() => {\r\n                          handleDeleteProduct(item);\r\n                        }}\r\n                      >\r\n                        Delete\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"secondary\"\r\n                        size=\"sm\"\r\n                        className=\"col-5 mt-3 ml-2 p-2\"\r\n                        onClick={() => {\r\n                          handleUpdateProduct(item);\r\n                        }}\r\n                      >\r\n                        Update\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          ))}\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","C:\\Users\\gcs26\\Documents\\examensarbete\\e-handel\\src\\components\\SimpleMenu.js",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":45,"column":6,"nodeType":"150","endLine":45,"endColumn":8,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":28},{"ruleId":"152","severity":1,"message":"156","line":13,"column":32,"nodeType":"154","messageId":"155","endLine":13,"endColumn":40},{"ruleId":"152","severity":1,"message":"157","line":13,"column":19,"nodeType":"154","messageId":"155","endLine":13,"endColumn":23},{"ruleId":"148","severity":1,"message":"158","line":46,"column":3,"nodeType":"154","endLine":46,"endColumn":12,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":107,"column":23,"nodeType":"162","endLine":107,"endColumn":46},{"ruleId":"148","severity":1,"message":"163","line":69,"column":6,"nodeType":"150","endLine":69,"endColumn":8,"suggestions":"164"},{"ruleId":"148","severity":1,"message":"165","line":28,"column":6,"nodeType":"150","endLine":28,"endColumn":8,"suggestions":"166"},{"ruleId":"148","severity":1,"message":"167","line":86,"column":6,"nodeType":"150","endLine":86,"endColumn":8,"suggestions":"168"},{"ruleId":"148","severity":1,"message":"169","line":49,"column":6,"nodeType":"150","endLine":49,"endColumn":12,"suggestions":"170"},{"ruleId":"152","severity":1,"message":"171","line":2,"column":14,"nodeType":"154","messageId":"155","endLine":2,"endColumn":21},{"ruleId":"148","severity":1,"message":"172","line":9,"column":6,"nodeType":"150","endLine":9,"endColumn":8,"suggestions":"173"},{"ruleId":"148","severity":1,"message":"174","line":30,"column":6,"nodeType":"150","endLine":30,"endColumn":15,"suggestions":"175"},{"ruleId":"148","severity":1,"message":"176","line":39,"column":6,"nodeType":"150","endLine":39,"endColumn":8,"suggestions":"177"},{"ruleId":"152","severity":1,"message":"178","line":14,"column":19,"nodeType":"154","messageId":"155","endLine":14,"endColumn":29},{"ruleId":"179","severity":1,"message":"180","line":43,"column":38,"nodeType":"181","messageId":"182","endLine":43,"endColumn":40},{"ruleId":"179","severity":1,"message":"180","line":58,"column":34,"nodeType":"181","messageId":"182","endLine":58,"endColumn":36},{"ruleId":"179","severity":1,"message":"180","line":59,"column":51,"nodeType":"181","messageId":"182","endLine":59,"endColumn":53},{"ruleId":"148","severity":1,"message":"183","line":98,"column":6,"nodeType":"150","endLine":98,"endColumn":33,"suggestions":"184"},{"ruleId":"179","severity":1,"message":"180","line":102,"column":41,"nodeType":"181","messageId":"182","endLine":102,"endColumn":43},{"ruleId":"148","severity":1,"message":"185","line":84,"column":6,"nodeType":"150","endLine":84,"endColumn":8,"suggestions":"186"},{"ruleId":"179","severity":1,"message":"187","line":142,"column":61,"nodeType":"181","messageId":"188","endLine":142,"endColumn":63},{"ruleId":"179","severity":1,"message":"187","line":152,"column":61,"nodeType":"181","messageId":"188","endLine":152,"endColumn":63},{"ruleId":"148","severity":1,"message":"189","line":50,"column":6,"nodeType":"150","endLine":50,"endColumn":8,"suggestions":"190"},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setGlobalCategories'. Either include it or remove the dependency array.","ArrayExpression",["193"],"no-unused-vars","'firebaseLocalStorage' is defined but never used.","Identifier","unusedVar","'setAdmin' is assigned a value but never used.","'Link' is defined but never used.","React Hook useEffect contains a call to 'setCustMenu'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["194"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'currentPassword' and 'setCurrentPassword'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has missing dependencies: 'location.pathname', 'productId', 'setLocation', 'setProdId', and 'singleProduct'. Either include them or remove the dependency array.",["196"],"React Hook useEffect has missing dependencies: 'setImageUrl' and 'setProductOption'. Either include them or remove the dependency array.",["197"],"React Hook useEffect has missing dependencies: 'productOption' and 'setImageUrl'. Either include them or remove the dependency array.",["198"],"'storage' is defined but never used.","React Hook useEffect has a missing dependency: 'product'. Either include it or remove the dependency array. If 'setProduct' needs the current value of 'product', you can also switch to useReducer instead of useState and read 'product' in the reducer.",["199"],"React Hook useEffect has a missing dependency: 'productForDeletion'. Either include it or remove the dependency array.",["200"],"React Hook useCallback has a missing dependency: 'type'. Either include it or remove the dependency array. If 'setUploadFile' needs the current value of 'type', you can also switch to useReducer instead of useState and read 'type' in the reducer.",["201"],"'setLoading' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'getSingleProduct', 'location', and 'searchString'. Either include them or remove the dependency array.",["202"],"React Hook useEffect has missing dependencies: 'setImageUrl', 'setProductOption', 'singleProduct.category', 'singleProduct.description', 'singleProduct.name', 'singleProduct.price', and 'singleProduct.thumbnail'. Either include them or remove the dependency array.",["203"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'location.pathname' and 'setLocation'. Either include them or remove the dependency array.",["204"],"no-global-assign","no-unsafe-negation",{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},"Update the dependencies array to be: [setGlobalCategories]",{"range":"229","text":"230"},"Add dependencies array: []",{"range":"231","text":"232"},"Update the dependencies array to be: [currentPassword, setCurrentPassword]",{"range":"233","text":"234"},"Update the dependencies array to be: [location.pathname, productId, setLocation, setProdId, singleProduct]",{"range":"235","text":"236"},"Update the dependencies array to be: [setImageUrl, setProductOption]",{"range":"237","text":"238"},"Update the dependencies array to be: [file, productOption, setImageUrl]",{"range":"239","text":"240"},"Update the dependencies array to be: [product]",{"range":"241","text":"242"},"Update the dependencies array to be: [product, productForDeletion]",{"range":"243","text":"244"},"Update the dependencies array to be: [type]",{"range":"245","text":"246"},"Update the dependencies array to be: [productCategories, prodId, location, searchString, getSingleProduct]",{"range":"247","text":"248"},"Update the dependencies array to be: [setImageUrl, setProductOption, singleProduct.category, singleProduct.description, singleProduct.name, singleProduct.price, singleProduct.thumbnail]",{"range":"249","text":"250"},"Update the dependencies array to be: [location.pathname, setLocation]",{"range":"251","text":"252"},[1838,1840],"[setGlobalCategories]",[1676,1676],", []",[2342,2344],"[currentPassword, setCurrentPassword]",[846,848],"[location.pathname, productId, setLocation, setProdId, singleProduct]",[2377,2379],"[setImageUrl, setProductOption]",[1394,1400],"[file, productOption, setImageUrl]",[245,247],"[product]",[703,712],"[product, productForDeletion]",[1124,1126],"[type]",[3187,3214],"[productCategories, prodId, location, searchString, getSingleProduct]",[2336,2338],"[setImageUrl, setProductOption, singleProduct.category, singleProduct.description, singleProduct.name, singleProduct.price, singleProduct.thumbnail]",[1308,1310],"[location.pathname, setLocation]"]